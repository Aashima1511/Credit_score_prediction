# -*- coding: utf-8 -*-
"""MP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12aU3wTRI5yjustVceoQOcbFpvDYU7HdO
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
train=pd.read_csv("train.csv")

train.head()

train.info()

train.isnull().sum()

train['Monthly_Balance'].unique()

train['Amount_invested_monthly'].unique()

train['Credit_Score'].unique()
train['Credit_Score']=train['Credit_Score'].map({'Good':1, 'Standard':2, 'Poor':3})

train['Interest_Rate'].unique()

list=['Name', 'Monthly_Inhand_Salary', 'Num_Bank_Accounts','Num_Credit_Card','Interest_Rate','Num_of_Loan','Type_of_Loan','Delay_from_due_date','Num_of_Delayed_Payment','Changed_Credit_Limit','Num_Credit_Inquiries','Credit_Mix','Outstanding_Debt','Credit_Utilization_Ratio','Credit_History_Age','Payment_of_Min_Amount','Total_EMI_per_month','Amount_invested_monthly','Payment_Behaviour','Monthly_Balance','Credit_Score']
for i in list:
  train[i]=train[i].fillna(train[i].mode()[0])

train.info()

train['Occupation'].unique()
train['Occupation']=train['Occupation'].map({'Scientist':1, '_______':2, 'Teacher':3, 'Engineer':4, 'Entrepreneur':5,'Developer':6, 'Lawyer':7, 'Media_Manager':8, 'Doctor':9, 'Journalist':10,'Manager':11, 'Accountant':12, 'Musician':13, 'Mechanic':14, 'Writer':15,'Architect':16})

train['Month'].unique()
train['Month']=train['Month'].map({'January':1, 'February':2, 'March':3, 'April':4, 'May':5, 'June':6, 'July':7,'August':8})

train['Credit_Mix'].unique()
train['Credit_Mix']=train['Credit_Mix'].map({'_':0, 'Good':1, 'Standard':2, 'Bad':3})

train['Payment_of_Min_Amount'].unique()
train['Payment_of_Min_Amount']=train['Payment_of_Min_Amount'].map({'No':0, 'NM':2, 'Yes':1})

train.info()

list=['SSN', 'Age', 'Name', 'Customer_ID', 'ID', 'Num_of_Delayed_Payment', 'Num_of_Loan', 'Payment_Behaviour', 'Annual_Income', 'Changed_Credit_Limit', 'Outstanding_Debt', 'Credit_History_Age', 'Amount_invested_monthly']
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
for i in list:
  train[i]=le.fit_transform(train[i])

train.info()

train['Type_of_Loan']=le.fit_transform(train['Type_of_Loan'])

train.head()

train['Monthly_Balance']=pd.to_numeric(train['Monthly_Balance'], errors='coerce')

train.info()

train['Monthly_Balance']=train['Monthly_Balance'].fillna(train['Monthly_Balance'].mode()[0])

train.info()

train.describe()

x=train.drop('Credit_Score', axis=1)
y=train['Credit_Score']
x.shape, y.shape

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.2,stratify=y)

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
dtc=DecisionTreeClassifier(max_depth=20)
dtc.fit(x_train,y_train)
predict=dtc.predict(x_test)
print(accuracy_score(y_test,predict))

from sklearn.model_selection import GridSearchCV
params={"criterion":("gini","entropy"),
        "max_depth":(2,3,4,6,8,10,14,16,18,20,22),
        "min_samples_split":(2,4,6,8,10,12,14)
        }
tree=DecisionTreeClassifier()
grid_search=GridSearchCV(estimator=tree,scoring="accuracy",param_grid=params,cv=5,verbose=True,n_jobs=-1)
grid_search.fit(x_train,y_train)
grid_search.best_params_

dtc=DecisionTreeClassifier(criterion='gini', max_depth=16, min_samples_split=2)
dtc.fit(x_train,y_train)
predict=dtc.predict(x_test)
print(accuracy_score(y_test,predict))

from sklearn.ensemble import RandomForestClassifier
rfc=RandomForestClassifier(max_depth=46)
rfc.fit(x_train,y_train)
predict=rfc.predict(x_test)
print(accuracy_score(y_test, predict))

"""Testing data

"""

test=pd.read_csv("test.csv")

test.head()

test.info()

list=['Name', 'Monthly_Inhand_Salary','Type_of_Loan','Num_of_Delayed_Payment','Num_Credit_Inquiries','Credit_History_Age','Amount_invested_monthly','Monthly_Balance']
for i in list:
  test[i]=test[i].fillna(test[i].mode()[0])

test['Occupation'].unique()
test['Occupation']=test['Occupation'].map({'Scientist':1, '_______':2, 'Teacher':3, 'Engineer':4, 'Entrepreneur':5,'Developer':6, 'Lawyer':7, 'Media_Manager':8, 'Doctor':9, 'Journalist':10,'Manager':11, 'Accountant':12, 'Musician':13, 'Mechanic':14, 'Writer':15,'Architect':16})

test['Month'].unique()
test['Month']=test['Month'].map({'January':1, 'February':2, 'March':3, 'April':4, 'May':5, 'June':6, 'July':7,'August':8})
test['Month']=test['Month'].replace(np.nan,0)

test['Credit_Mix'].unique()
test['Credit_Mix']=test['Credit_Mix'].map({'_':0, 'Good':1, 'Standard':2, 'Bad':3})

test['Payment_of_Min_Amount'].unique()
test['Payment_of_Min_Amount']=test['Payment_of_Min_Amount'].map({'No':0, 'NM':2, 'Yes':1})

list=['SSN', 'Age', 'Name', 'Customer_ID', 'ID', 'Num_of_Delayed_Payment', 'Num_of_Loan', 'Payment_Behaviour', 'Annual_Income', 'Changed_Credit_Limit', 'Outstanding_Debt', 'Credit_History_Age', 'Amount_invested_monthly']
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
for i in list:
  test[i]=le.fit_transform(test[i])

test['Type_of_Loan']=le.fit_transform(test['Type_of_Loan'])

test['Monthly_Balance']=pd.to_numeric(test['Monthly_Balance'], errors='coerce')

test.info()

test['Monthly_Balance']=test['Monthly_Balance'].fillna(test['Monthly_Balance'].mode()[0])

from sklearn.ensemble import RandomForestClassifier
rfc=RandomForestClassifier(max_depth=46)
rfc.fit(x_train,y_train)
predict=rfc.predict(test)

pred=pd.DataFrame(predict, columns=['Prediction'])
print(pred)

res=pd.concat([test['Customer_ID'], test['ID']], axis=1)
print(res)

output=pd.concat([res, pred], axis=1)
print("ID", "\t\t", "Customer_ID", "\t\t", "Prediction")
for i,r in output.iterrows():
  print(r['ID'],"\t\t", r['Customer_ID'], "\t\t", r['Prediction'])

